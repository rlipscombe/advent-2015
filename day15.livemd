# Advent of Code 2015, Day 15

## Dependencies

```elixir
Mix.install([{:kino, github: "livebook-dev/kino"}])
```

## Puzzle Input

```elixir
input = Kino.Input.textarea("Puzzle Input:")
```

```elixir
re =
  ~r/(.*): capacity ([0-9-]+), durability ([0-9-]+), flavor ([0-9-]+), texture ([0-9-]+), calories ([0-9-]+)/

ingredients =
  Kino.Input.read(input)
  |> String.split("\n", trim: true)
  |> Enum.map(&Regex.run(re, &1, capture: :all_but_first))
  |> Enum.map(fn [ingredient, capacity, durability, flavor, texture, calories] ->
    {ingredient,
     %{
       capacity: String.to_integer(capacity),
       durability: String.to_integer(durability),
       flavor: String.to_integer(flavor),
       texture: String.to_integer(texture),
       calories: String.to_integer(calories)
     }}
  end)
```

```elixir
defmodule Combinations do
  def get(ingredients, total), do: getp([], ingredients, total, [])

  # def getp([last], total, acc), do: [{last, total} | acc]

  defp getp(recipe, [ingredient], total, recipes) do
    [[{ingredient, total} | recipe] | recipes]
  end

  defp getp(recipe, [ingredient | ingredients], total, recipes) do
    Enum.reduce(0..total, recipes, fn i, recipes ->
      getp([{ingredient, i} | recipe], ingredients, total - i, recipes)
    end)
  end
end

Combinations.get([:a, :b, :c, :d], 10)
:pass
```

```elixir
cookies =
  Combinations.get(ingredients, 100)
  |> Enum.map(fn recipe ->
    score =
      Enum.reduce(
        recipe,
        %{capacity: 0, durability: 0, flavor: 0, texture: 0},
        fn {{_ingredient, properties}, qty}, acc ->
          %{
            acc
            | capacity: acc.capacity + qty * properties.capacity,
              durability: acc.durability + qty * properties.durability,
              flavor: acc.flavor + qty * properties.flavor,
              texture: acc.texture + qty * properties.texture
          }
        end
      )

    score =
      score
      |> Enum.map(fn
        {k, v} when v < 0 -> {k, 0}
        {k, v} -> {k, v}
      end)
      |> Enum.into(%{})

    {recipe, score}
  end)
```

```elixir
cookies
|> Enum.map(fn {recipe, score} ->
  Enum.reduce(score, 1, fn {_, a}, acc -> acc * a end)
end)
|> Enum.max()
```
