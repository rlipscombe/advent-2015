# Advent of Code 2015, Day 15

## Dependencies

```elixir
Mix.install([{:kino, github: "livebook-dev/kino"}])
```

## Puzzle Input

```elixir
input = Kino.Input.textarea("Puzzle Input:")
```

```elixir
re =
  ~r/(.*): capacity ([0-9-]+), durability ([0-9-]+), flavor ([0-9-]+), texture ([0-9-]+), calories ([0-9-]+)/

ingredients =
  Kino.Input.read(input)
  |> String.split("\n", trim: true)
  |> Enum.map(&Regex.run(re, &1, capture: :all_but_first))
  |> Enum.map(fn [ingredient, capacity, durability, flavor, texture, calories] ->
    {ingredient,
     {
       String.to_integer(capacity),
       String.to_integer(durability),
       String.to_integer(flavor),
       String.to_integer(texture),
       String.to_integer(calories)
     }}
  end)
  |> Enum.into(%{})
```

```elixir
ingredient_names = Enum.map(ingredients, fn {name, _properties} -> name end)
```

```elixir
defmodule Combinations do
  def get(ingredients, total), do: getp([], ingredients, total, [])

  # def getp([last], total, acc), do: [{last, total} | acc]

  defp getp(recipe, [ingredient], total, recipes) do
    [[{ingredient, total} | recipe] | recipes]
  end

  defp getp(recipe, [ingredient | ingredients], total, recipes) do
    Enum.reduce(0..total, recipes, fn i, recipes ->
      getp([{ingredient, i} | recipe], ingredients, total - i, recipes)
    end)
  end
end

1 = Combinations.get([:a], 2) |> Enum.count()
4 = Combinations.get([:a, :b], 3) |> Enum.count()
21 = Combinations.get([:a, :b, :c], 5) |> Enum.count()
286 = Combinations.get([:a, :b, :c, :d], 10) |> Enum.count()
:pass
```

```elixir
combinations = Combinations.get(ingredient_names, 100)
```

```elixir
Enum.count(combinations)
```

```elixir
score_recipe = fn recipe ->
  score =
    Enum.reduce(
      recipe,
      {0, 0, 0, 0, 0},
      fn {ingredient_name, qty}, {cap, dur, fla, tex, cal} ->
        {capa, dura, flav, text, calo} = Map.fetch!(ingredients, ingredient_name)
        {cap + qty * capa, dur + qty * dura, fla + qty * flav, tex + qty * text, cal + qty * calo}
      end
    )

  collar = fn
    x when x > 0 -> x
    _ -> 0
  end

  {collar.(elem(score, 0)), collar.(elem(score, 1)), collar.(elem(score, 2)),
   collar.(elem(score, 3)), collar.(elem(score, 4))}
end
```

```elixir
:timer.tc(fn ->
  score_recipe.([
    {"Sugar", 0},
    {"Frosting", 0},
    {"PeanutButter", 0},
    {"Sprinkles", 100}
  ])
end)
```

```elixir
# 41s
cookies =
  combinations
  |> Enum.map(fn recipe ->
    {recipe, score_recipe.(recipe)}
  end)
```

```elixir
cookies
|> Enum.map(fn {_recipe, _score = {cap, dur, fla, tex, _cal}} ->
  cap * dur * fla * tex
end)
|> Enum.max()
```

## Part 2

```elixir
healthy_cookies =
  cookies
  |> Enum.filter(fn {_recipe, _score = {_, _, _, _, calories}} ->
    calories == 500
  end)
```

```elixir
healthy_cookies
|> Enum.map(fn {_recipe, _score = {cap, dur, fla, tex, _cal}} ->
  cap * dur * fla * tex
end)
|> Enum.max()
```
