# Advent of Code 2015, Day 15

## Dependencies

```elixir
Mix.install([{:kino, github: "livebook-dev/kino"}])
```

## Puzzle Input

```elixir
input = Kino.Input.textarea("Puzzle Input:")
```

```elixir
re =
  ~r/(.*): capacity ([0-9-]+), durability ([0-9-]+), flavor ([0-9-]+), texture ([0-9-]+), calories ([0-9-]+)/

ingredients =
  Kino.Input.read(input)
  |> String.split("\n", trim: true)
  |> Enum.map(&Regex.run(re, &1, capture: :all_but_first))
  |> Enum.map(fn [ingredient, capacity, durability, flavor, texture, calories] ->
    {ingredient,
     %{
       capacity: String.to_integer(capacity),
       durability: String.to_integer(durability),
       flavor: String.to_integer(flavor),
       texture: String.to_integer(texture),
       calories: String.to_integer(calories)
     }}
  end)
```

```elixir
defmodule Combinations do
  def get(ingredients, total), do: getp([], ingredients, total, [])

  # def getp([last], total, acc), do: [{last, total} | acc]

  defp getp(recipe, [ingredient], total, recipes) do
    [[{ingredient, total} | recipe] | recipes]
  end

  defp getp(recipe, [ingredient | ingredients], total, recipes) do
    Enum.reduce(0..total, recipes, fn i, recipes ->
      getp([{ingredient, i} | recipe], ingredients, total - i, recipes)
    end)
  end
end

Combinations.get([:a, :b, :c, :d], 10)
:pass
```

```elixir
combinations = Combinations.get(ingredients, 100)
```

```elixir
Enum.count(combinations)
```

```elixir
score_recipe = fn recipe ->
  capacity =
    Enum.reduce(recipe, 0, fn {{_, %{capacity: x}}, qty}, acc ->
      acc + qty * x
    end)

  durability =
    Enum.reduce(recipe, 0, fn {{_, %{durability: x}}, qty}, acc ->
      acc + qty * x
    end)

  flavor =
    Enum.reduce(recipe, 0, fn {{_, %{flavor: x}}, qty}, acc ->
      acc + qty * x
    end)

  texture =
    Enum.reduce(recipe, 0, fn {{_, %{texture: x}}, qty}, acc ->
      acc + qty * x
    end)

  score = %{
    capacity: if(capacity > 0, do: capacity, else: 0),
    durability: if(durability > 0, do: durability, else: 0),
    flavor: if(flavor > 0, do: flavor, else: 0),
    texture: if(texture > 0, do: texture, else: 0)
  }

  score
end
```

```elixir
:timer.tc(fn ->
  score_recipe.([
    {{"Butterscotch", %{capacity: -1, durability: -2, flavor: 6, texture: 3, calories: 8}}, 44},
    {{"Cinnamon", %{capacity: 2, durability: 3, flavor: -2, texture: -1, calories: 3}}, 56}
  ])
end)
```

```elixir
:timer.tc(fn ->
  score_recipe.([
    {{"Sugar", %{calories: 8, capacity: -1, durability: 0, flavor: 0, texture: 2}}, 0},
    {{"Frosting", %{calories: 6, capacity: 0, durability: -1, flavor: 4, texture: 0}}, 0},
    {{"PeanutButter", %{calories: 1, capacity: -1, durability: 3, flavor: 0, texture: 0}}, 0},
    {{"Sprinkles", %{calories: 5, capacity: 5, durability: -1, flavor: 0, texture: 0}}, 100}
  ])
end)
```

```elixir
cookies =
  combinations
  |> Enum.map(fn recipe ->
    {recipe, score_recipe.(recipe)}
  end)
```

```elixir
cookies
|> Enum.map(fn {recipe, score} ->
  Enum.reduce(score, 1, fn {_, a}, acc -> acc * a end)
end)
|> Enum.max()
```
